# Python 前言基础知识

# 注释规范：
# Python 单行注释符号（#）

'''
三对单引号，Python多行注释符号
三对单引号，Python多行注释符号
三对单引号，Python多行注释符号
三对单引号，Python多行注释符号
'''

"""
三对双引号，Python多行注释符号
三对双引号，Python多行注释符号
三对双引号，Python多行注释符号
"""

"""
# 中文注释方法：
#coding=utf-8
# 或者：
#coding=gbk
"""


# 注释快捷键
"""
cmd b 跳转到声明处（cmd加鼠标）
opt + 空格 显示符号代码 （esc退出窗口 回车进入代码）
cmd []光标之前/后的位置
opt + F7 find usage
cmd backspace 删除当前行
cmd +c 复制光标当前行,剪切同理
cmd + f 当前文件搜索（回车下一个 shift回车上一个）
cmd + r 当前文件替换
shift + cmd + f 全局搜索
shift + cmd + R 全局替换
cmd+o 搜索class
shift + cmd + o 搜索文件
opt + cmd + o 搜索符号（函数等)
cmd + l 指定行数跳转
shift enter 在行中的时候直接到下一行
cmd + 展开当前
cmd - 折叠当前
shift cmd + 展开所有
shift cmd - 折叠所有
cmd / 注释/取消注释一行
opt + cmd + / 批量注释(pycharm不生效)
ctr + tab 史上最NB的导航窗口（工程文件列表、文件结构列表、命令行模式、代码检查、VCS等，下面两个是可以被替换的）
alt + F12 打开命令行栏
cmd + F12 显示文件结构
cmd j 代码智能补全
alt + F1 定位编辑文件所在位置:
cmd + F6 更改变量
opt + cmd + t 指定代码被注释语句或者逻辑结构、函数包围
Tab / Shift + Tab 缩进、不缩进当前行
opt + cmd + l 代码块对齐
cmd+d 在下一行复制本行的内容

"""

"""
Python是一门优雅而健壮的编程语言，它继承了传统编译语言的强大性和通用性，同时也借鉴了简单脚本和解释语言的易用性
"""

# Python 起源
"""
贵铎·范·罗萨姆(Guido van Rossum)于 1989 年底始创了 Python
1991 年 初，Python 发布了第一个公开发行版。
"""

# Python 特点
"""
# 高级语言，系统调用的解释性语言
汇编语言是上帝献给那些挣扎
在机器代码中的人的礼物，后来有了 FORTRAN、 C 和 Pascal 语言，它们将计算提升到了崭新 的高度，并且开创了软件开发行业。
强大的、可以进行系统调用的解释型脚本语言，例如 Tcl、 Perl 和 Python。

# Python 是面向对象的
面向对象编程支持将特定的行为、特性以及和/或功能与它们要处理或所代表的数据结合在一起。

# 可升级
Python 提供了基本的开发模块，你可以在它上面开发你的软件，而且当这些需要 扩展和增长时，Python 的可插入性和模块化架构则能使你的项目生机盎然和易于管理。
Python 提倡简洁的代码设计、高级的 数据结构和模块化的组件，这些特点可以让你在提升项目的范围和规模的同时，确保灵活性、 一致性并缩短必要的调试时间。

# 可扩展
因为 Python 的标准实现是使用 C 语言完成的(也就是 CPython)，所以要使用 C 和 C++ 编写 Python 扩展。Python 的 Java 实现被称作 Jython，要使用 Java 编写其扩展。最后， 还有 IronPython，这是针对 .NET 或 Mono 平台的 C# 实现。你可以使用 C# 或者 VB.Net 扩
展 IronPython。

# 可移植性
因为 Python 是用 C 写的，又由于 C 的可移植性，使得 Python 可以运行 在任何带有 ANSI C 编译器的平台上。尽管有一些针对不同平台开发的特有模块，但是在任何一 个平台上用 Python 开发的通用软件都可以稍事修改或者原封不动的在其他平台上运行。这种
 可移植性既适用于不同的架构，也适用于不同的操作系统。

# 易读，易学
Python 与其他语言显著的差异是，它没有其他语言通常用来访问变量、定义代码块和进行
模式匹配的命令式符号。通常这些符号包括:美元符号($)、分号(;)、波浪号(~)等等。

# 易维护

# 健壮性
    针对错误，Python 提供了“安全合理”的退出机制，让程序员能掌控局面。一旦你的 Python 由 于错误崩溃，解释程序就会转出一个“堆栈跟踪”，那里面有可用到的全部信息，包括你程序
崩溃的原因以及是那段代码(文件名、行数、行数调用等等)出错了。这些错误被称为异常。 如果在运行时发生这样的错误，Python 使你能够监控这些错误并进行处理。
    这些异常处理可以采取相应的措施，例如解决问题、重定向程序流、执行清除或维护步骤、 正常关闭应用程序、亦或干脆忽略掉。无论如何，这都可以有效的缩减开发周期中的调试环节。 Python 的健壮性对软件设计师和用户而言都是大有助益的。
    一旦某些错误处理不当，Python 也 还能提供一些信息，作为某个错误结果而产生的堆栈追踪不仅可以描述错误的类型和位置，还
能指出代码所在模块。

# 高效的快速原型开发工具
Python 有许多面向其他系统的接口， 它的功能足够强大，本身也足够强壮，所以完全可以使用 Python 开发整个系统的原型。显然， 传统的编译型语言也能实现同样的系统建模，但是 Python 工程方面的简洁性让我们可以在同样 的时间内游刃有余的完成相同的工作。
此外，大家已经为 Python 开发了为数众多的扩展库，所 以无论你打算开发什么样的应用程序，都可能找到先行的前辈。你所要做的全部事情，就是来 个“即插即用”(当然，也要自行配置一番)!只要你能想得出来，Python 模块和包就能帮你 实现。
Python 标准库是很完备的，如果你在其中找不到所需，那么第三方模块或包就会为你完 成工作提供可能。

# 内存管理器
C 或者 C++最大的弊病在于内存管理是由开发者负责的。
在 Python 中，由于内存管理是由 Python 解释器负责的，所以开发人员就可以从内存事务 中解放出来，全神贯注于最直接的目标，仅仅致力于开发计划中首要的应用程序。这会使错误 更少、程序更健壮、开发周期更短。

# 解释性和（字节）编译性
Python 是一种解释型语言，这意味着开发过程中没有了编译这个环节。一般来说，由于不
是以本地机器码运行，纯粹的解释型语言通常比编译型语言运行的慢。然而，类似于 Java，Python 实际上是字节编译的，其结果就是可以生成一种近似机器语言的中间形式。这不仅改善了 Python 的性能，还同时使它保持了解释型语言的优点。

Unix 衍生系统(Linux，MacOS X，Solaris，FreeBSD 等等)

"""

#!/usr/bin/python3.6
































